/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DistributeInterface extends ethers.utils.Interface {
  functions: {
    "distribute(address,uint256)": FunctionFragment;
    "getHolderContractAddress()": FunctionFragment;
    "getRecipientAmount(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "recipientAmounts(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetRecipientAmount(address)": FunctionFragment;
    "setHolderContractAddress(address)": FunctionFragment;
    "setOrAddRecipientAmount(address,uint256)": FunctionFragment;
    "subtractRecipientAmount(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "distribute",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHolderContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recipientAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetRecipientAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHolderContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrAddRecipientAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subtractRecipientAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHolderContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetRecipientAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHolderContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrAddRecipientAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subtractRecipientAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "LogDistribute(address,address,uint256)": EventFragment;
    "LogResetRecipientAmount(address,address)": EventFragment;
    "LogSetOrAddRecipientAmount(address,address,uint256)": EventFragment;
    "LogSubtractRecipientAmount(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogDistribute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogResetRecipientAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOrAddRecipientAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSubtractRecipientAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LogDistributeEvent = TypedEvent<
  [string, string, BigNumber] & {
    from: string;
    recipient: string;
    currentAmount: BigNumber;
  }
>;

export type LogResetRecipientAmountEvent = TypedEvent<
  [string, string] & { actor: string; recipient: string }
>;

export type LogSetOrAddRecipientAmountEvent = TypedEvent<
  [string, string, BigNumber] & {
    actor: string;
    recipient: string;
    amount: BigNumber;
  }
>;

export type LogSubtractRecipientAmountEvent = TypedEvent<
  [string, string, BigNumber] & {
    actor: string;
    recipient: string;
    amount: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Distribute extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DistributeInterface;

  functions: {
    distribute(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getHolderContractAddress(overrides?: CallOverrides): Promise<[string]>;

    getRecipientAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recipientAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetRecipientAmount(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHolderContractAddress(
      holderContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOrAddRecipientAmount(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subtractRecipientAmount(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  distribute(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getHolderContractAddress(overrides?: CallOverrides): Promise<string>;

  getRecipientAmount(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  recipientAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetRecipientAmount(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHolderContractAddress(
    holderContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOrAddRecipientAmount(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subtractRecipientAmount(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    distribute(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getHolderContractAddress(overrides?: CallOverrides): Promise<string>;

    getRecipientAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    recipientAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetRecipientAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setHolderContractAddress(
      holderContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOrAddRecipientAmount(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subtractRecipientAmount(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogDistribute(address,address,uint256)"(
      from?: string | null,
      recipient?: string | null,
      currentAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; recipient: string; currentAmount: BigNumber }
    >;

    LogDistribute(
      from?: string | null,
      recipient?: string | null,
      currentAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; recipient: string; currentAmount: BigNumber }
    >;

    "LogResetRecipientAmount(address,address)"(
      actor?: string | null,
      recipient?: string | null
    ): TypedEventFilter<[string, string], { actor: string; recipient: string }>;

    LogResetRecipientAmount(
      actor?: string | null,
      recipient?: string | null
    ): TypedEventFilter<[string, string], { actor: string; recipient: string }>;

    "LogSetOrAddRecipientAmount(address,address,uint256)"(
      actor?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { actor: string; recipient: string; amount: BigNumber }
    >;

    LogSetOrAddRecipientAmount(
      actor?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { actor: string; recipient: string; amount: BigNumber }
    >;

    "LogSubtractRecipientAmount(address,address,uint256)"(
      actor?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { actor: string; recipient: string; amount: BigNumber }
    >;

    LogSubtractRecipientAmount(
      actor?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { actor: string; recipient: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    distribute(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getHolderContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRecipientAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recipientAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetRecipientAmount(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHolderContractAddress(
      holderContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOrAddRecipientAmount(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subtractRecipientAmount(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    distribute(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getHolderContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecipientAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipientAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetRecipientAmount(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHolderContractAddress(
      holderContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOrAddRecipientAmount(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subtractRecipientAmount(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
